<h2>Bài viết mới nhất</h2>
<button id="open-post-modal">Tạo bài viết</button>
<div id="posts-container">
    <!-- Bài viết sẽ được thêm vào đây -->

</div>

<!-- Popup Post modal -->
<div id="post-modal" class="modal">
    <div class="modal-content">
        <span class="close">&times;</span>
        <h3>Đăng bài viết</h3>
        <form id="post-form">
            <div class="form-group">
                <label for="title">Tiêu đề:</label>
                <input type="text" id="title" name="title" required>
            </div>

            <div class="form-group">
                <label for="content">Nội dung:</label>
                <textarea id="content" name="content" required></textarea>
            </div>

            <div class="form-group">
                <label for="images">Hình ảnh:</label>
                <input type="file" id="images" name="images" multiple>
            </div>

            <button type="submit">Đăng bài</button>
        </form>

    </div>
</div>
<!-- Popup Comment -->
<div id="comment-popup" class="hidden">
    <div class="popup-content">
        <span class="close-btn" onclick="closePopup()">&times;</span>
        <h3>Bình luận</h3>
        <div id="comments-list"></div>
        <textarea id="comment-input" placeholder="Viết bình luận..."></textarea>
        <button id="submit-comment">Gửi</button>
    </div>
</div>

<script>
    async function fetchPosts() {
        try {
            const response = await fetch('/api/posts'); // Đảm bảo API URL chính xác
            if (!response.ok) {
                throw new Error(`Lỗi API: ${response.status}`);
            }

            const posts = await response.json();
            console.log("Dữ liệu bài viết:", posts); // Kiểm tra dữ liệu nhận được

            const container = document.getElementById('posts-container');

            posts.forEach(async (post) => {
                const postElement = document.createElement("div");
                postElement.className = "post";
                postElement.dataset.postid = post.postid; // Gán postid vào dataset
                let imagesHTML = "";
                let displayname = "Ẩn danh"; // Mặc định nếu không lấy được username
                if (post.images.length > 0) {
                    post.images.forEach(image => {
                        console.log(image)
                        imagesHTML += `<img src="${image}" alt="Hình ảnh bài viết" style="width:auto; height:400px; border-radius:10px; margin-top:10px;">`;
                    });
                }
                try {
                    const userResponse = await fetch(`/api/posts/getUser/${post.userid}`);
                    if (userResponse.ok) {
                        const userData = await userResponse.json();
                        displayname = userData.displayname || "Ẩn danh"; // Giả sử API trả về { username: "Tên người dùng" }
                    }
                } catch (err) {
                    console.error("Lỗi khi lấy tên người dùng:", err);
                }

                postElement.innerHTML = `
                    <h3>${post.title}</h3>
                    <p><strong>Người đăng:</strong> ${displayname}</p>
                    <p>${post.content}</p>
                    ${imagesHTML}
                    <br>
                    <button class="comment-btn" onclick="openPopup(${post.postid})">Xem bình luận</button>
                `;



                //${imagesHTML} cho len tren
                container.appendChild(postElement);
            });
        } catch (error) {
            console.error('Lỗi khi tải bài viết:', error);
        }
    }

    async function openPopup(postid) {
        const popup = document.getElementById("comment-popup");
        const commentsList = document.getElementById("comments-list");
        commentsList.innerHTML = ""; // Xóa dữ liệu cũ trước khi tải mới

        try {
            const response = await fetch(`/api/comments/${postid}`);
            if (!response.ok) throw new Error(`Lỗi API: ${response.status}`);

            const comments = await response.json();
            comments.forEach((comment) => {
                const displayname = comment.displayname || "Ẩn danh"; // Lấy trực tiếp từ API

                const commentElement = document.createElement("p");
                commentElement.innerHTML = `<strong>${displayname}:</strong> ${comment.content}`;
                commentsList.appendChild(commentElement);
            });
        } catch (error) {
            console.error("Lỗi khi tải bình luận:", error);
        }

        // Hiển thị popup
        popup.classList.remove("hidden");
        document.getElementById("submit-comment").onclick = () => submitComment(postid);
    }

    function closePopup() {
        document.getElementById("comment-popup").classList.add("hidden");
    }

    async function submitComment(postid) {
        const commentInput = document.getElementById("comment-input");
        const content = commentInput.value.trim();
        if (!content) return alert("Vui lòng nhập bình luận!");

        try {
            const response = await fetch('/api/comments', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ postid, content })
            });

            if (!response.ok) throw new Error(`Lỗi API: ${response.status}`);
            alert("Đã gửi bình luận!");
            openPopup(postid); // Refresh lại danh sách bình luận
        } catch (error) {
            console.error("Lỗi khi gửi bình luận:", error);
        }
    }

    document.addEventListener("DOMContentLoaded", () => {
        const modal = document.getElementById("post-modal");
        const openModalBtn = document.getElementById("open-post-modal");
        const closeModalBtn = document.querySelector(".close");
        const postForm = document.getElementById("post-form");

        // Mở popup khi nhấn nút "Tạo bài viết"
        openModalBtn.addEventListener("click", () => {
            modal.style.display = "block";
        });

        // Đóng popup khi nhấn vào nút "X"
        closeModalBtn.addEventListener("click", () => {
            modal.style.display = "none";
        });

        // Đóng popup khi nhấn ra ngoài
        window.addEventListener("click", (event) => {
            if (event.target === modal) {
                modal.style.display = "none";
            }
        });

        // Xử lý gửi bài viết
        postForm.addEventListener("submit", async (event) => {
            event.preventDefault();

            const formData = new FormData();
            formData.append("title", document.getElementById("title").value);
            formData.append("content", document.getElementById("content").value);

            // Lấy file ảnh từ input
            const images = document.getElementById("images").files;
            for (let i = 0; i < images.length; i++) {
                formData.append("images", images[i]); // Đặt tên "files" để backend nhận đúng
            }

            try {
                const response = await fetch("/api/posts/create", {
                    method: "POST",
                    body: formData,
                });

                const result = await response.json();
                if (response.ok) {
                    alert("Bài viết đã được tạo!");
                    modal.style.display = "none";
                    location.reload(); // Tải lại danh sách bài viết
                } else {
                    alert(result.message);
                }
            } catch (error) {
                console.error("Lỗi khi đăng bài:", error);
                alert("Có lỗi xảy ra, vui lòng thử lại.");
            }
        });
    });

    // Gọi API khi trang load
    fetchPosts();


</script>
<style>
    .hidden {
        display: none;
    }

    .popup-content {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background: white;
        padding: 20px;
        border-radius: 10px;
        width: 300px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);
    }

    .close-btn {
        cursor: pointer;
        float: right;
        font-size: 20px;
    }

    .modal {
        display: none;
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.4);
    }

    .modal-content {
        background-color: white;
        margin: 10% auto;
        padding: 100px;
        border-radius: 10px;
        width: 50%;
    }

    .close {
        float: right;
        font-size: 20px;
        cursor: pointer;
    }
    #post-form {
    width: 300px; /* Định kích thước form */
    margin: 0 auto; /* Căn giữa form */
    padding: 20px;
    border: 1px solid #ccc;
    border-radius: 10px;
    background: #f9f9f9;
}

.form-group {
    display: flex;
    flex-direction: column; /* Đưa label lên trên input */
    margin-bottom: 15px;
}

label {
    font-weight: bold;
    margin-bottom: 5px;
}

input, textarea {
    width: 100%; /* Căn ngang toàn bộ */
    padding: 0px;
    border: 1px solid #ccc;
    border-radius: 5px;
}

textarea {
    height: 80px; /* Định kích thước cho textarea */
    resize: vertical;
}

button {
    width: 100%;
    padding: 10px;
    background: #D3C7D9;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-size: 16px;
}

button:hover {
    background: #D3C7D9;
}

</style>